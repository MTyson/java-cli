package com.infoworld;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.stream.Stream;
import org.jline.reader.Completer;
import org.jline.reader.LineReader;
import org.jline.reader.LineReaderBuilder;
import org.jline.reader.impl.DefaultParser;
import org.jline.reader.impl.completer.StringsCompleter;
import org.jline.terminal.Terminal;
import org.jline.terminal.TerminalBuilder;
import org.jline.utils.AttributedStringBuilder;
import org.jline.utils.AttributedStyle;
import org.jline.utils.InfoCmp;
import org.jline.utils.OSUtils;
import org.jline.utils.Pagination;
public class App {
    public static void main(String[] args) throws IOException {
        Terminal terminal = TerminalBuilder.terminal();
        LineReader reader = LineReaderBuilder.builder()
                .terminal(terminal)
                .completer(new StringsCompleter("describe", "create"))
                .parser(new DefaultParser())
                .build();
        while (true) {
            String line = reader.readLine("> ");
            if (line == null || line.equalsIgnoreCase("exit")) {
                break;
            }
            reader.getHistory().add(line);
            if (line.equalsIgnoreCase("describe")) {
                Path path = Paths.get(".");
                String output = getDirectoryHierarchy(path);
                Pagination pagination = new Pagination(reader, terminal, OutputStyle.None);
                pagination.page(new AttributedStringBuilder()
                        .style(AttributedStyle.DEFAULT.foreground(AttributedStyle.BLUE))
                        .append(output)
                        .toAnsi());
            } else {
                System.out.println("Unknown command: " + line);
            }
        }
    }
    public static String getDirectoryHierarchy(Path path) {
        StringBuilder sb = new StringBuilder();
        try (Stream<Path> paths = Files.walk(path)) {
            paths.sorted()
                    .forEach(p -> {
                        int depth = path.relativize(p).getNameCount();
                        sb.append("\033[").append(37+depth).append("m"); // different color for each depth
                        for (int i = 0; i < depth; i++) {
                            sb.append("  ");
                        }
                        sb.append(p.getFileName()).append("\033[0m\n"); // reset color
                    });
        } catch (IOException e) {
            e.printStackTrace();
        }
        return sb.toString();
    }
}

