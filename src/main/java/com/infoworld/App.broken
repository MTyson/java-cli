package com.infoworld;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.stream.Stream;
import org.jline.reader.LineReaderBuilder;
import org.jline.reader.impl.completer.StringsCompleter;
import org.jline.terminal.TerminalBuilder;
import org.jline.terminal.Terminal;
import org.jline.utils.AttributedString;
import org.jline.utils.AttributedStyle;
import org.jline.utils.InfoCmp.Capability;
import org.jline.keymap.KeyMap;
import org.jline.reader.KeyStroke;
import org.jline.utils.TerminalSignalHandler;
import org.jline.utils.*;

public class App {
    public static void main(String[] args) throws IOException {
        Terminal terminal = TerminalBuilder.terminal();
        LineReader reader = LineReaderBuilder.builder()
                .terminal(terminal)
                .completer(new StringsCompleter("describe", "create"))
                .build();
        while (true) {
            String line = reader.readLine("> ");
            if (line == null || line.equalsIgnoreCase("exit")) {
                break;
            }
            reader.getHistory().add(line);
            if (line.equalsIgnoreCase("describe")) {
                Path path = Paths.get(".");
                String directoryHierarchy = getDirectoryHierarchy(path);
                drawHighlightedDirectoryHierarchy(reader, directoryHierarchy);
            } else if (line.equalsIgnoreCase("create")) {
                System.out.println("TBD");
            } else {
                System.out.println("Unknown command: " + line);
            }
        }
    }
    public static String getDirectoryHierarchy(Path path) {
        StringBuilder sb = new StringBuilder();
        try (Stream<Path> paths = Files.walk(path)) {
            paths.sorted()
                    .forEach(
                            p -> {
                                int depth = path.relativize(p).getNameCount();
                                for (int i = 0; i < depth; i++) {
                                    sb.append(" ");
                                }
                                if (p.toFile().isDirectory()) {
                                    sb.append("/");
                                }
                                sb.append(p.getFileName()).append("\n");
                            });
        } catch (IOException e) {
            e.printStackTrace();
        }
        return sb.toString();
    }
public static void drawHighlightedDirectoryHierarchy(LineReader reader, String directoryHierarchy) throws IOException {
    int selectedLineIndex = 0;
    String[] lines = directoryHierarchy.split("\\r?\\n");
    int terminalWidth = TerminalBuilder.terminal().getWidth();
    KeyMap<List<String>> map = new KeyMap<>();
    map.bind(
        new KeyStroke(
            new int[] {27, 91, 70}
        ),
        (e, b) -> {
            selectedLineIndex = lines.length - 1;
          }
    );
    map.bind(
        new KeyStroke(
            new int[] {27, 91, 72}
        ),
        (e, b) -> {
            selectedLineIndex = 0;
          }
    );
    map.bind(
        new KeyStroke(
            new int[] {27, 91, 65}
        ),
        (e, b) -> {
            if (selectedLineIndex > 0) {
                selectedLineIndex--;
            }
        }
    );
    map.bind (
        new KeyStroke(
            new int[] {27, 91, 66}
        ),
        (e, b) -> {
            if (selectedLineIndex < lines.length - 1) {
                selectedLineIndex++;
            }
        }
    );
    TerminalSignalHandler.Signal WINCH =
        TerminalSignalHandler.Signal.WINCH;
    TerminalSignalHandler handle = 
        TerminalSignalHandler.of(TerminalBuilder.terminal(), 
                                 WINCH, 
                                 signal -> {
                                     // re-draw on window resize
                                     terminalWidth = signal.getTerminal().getWidth();
                                     try {
                                         drawHighlightedReader(reader, map, selectedLineIndex, lines, terminalWidth);
                                     } catch (IOException ex) {
                                         ex.printStackTrace();
                                     }
                                 });
    handle.handle(Terminal.Signal.WINCH); // initialize terminal width
    while (true) {
        drawHighlightedReader(reader, map, selectedLineIndex, lines, terminalWidth);
        KeyStroke keyStroke = reader.readBinding(KeyMap.class, map);
        if (keyStroke == null) {
            return;
        }
        map.getBound(keyStroke).run(keyStroke, null);
    }
}

public static void drawHighlightedReader(LineReader reader,
                                         KeyMap<List<String>> map,
                                         int selectedIndex,
                                         String[] lines,
                                         int terminalWidth) throws IOException {
    String lineFormat = "%" + (terminalWidth - 1) + "s";
    StringBuilder sb = new StringBuilder();
    for (int i = 0; i < lines.length; i++) {
        if (i == selectedIndex) {
            sb.append(AttributedString.escape(AttributedStyle.DEFAULT.foreground(AttributedStyle.GREEN)))
                    .append(String.format(lineFormat, lines[i]))
                    .append(AttributedString.escape(AttributedStyle.DEFAULT.foregroundDefault()));
        } else {
            sb.append(String.format(lineFormat, lines[i]));
        }
        sb.append("\n");
    }
    reader.clearScreen();
    reader.printAbove(sb.toString());
    reader.flush();
}

}

